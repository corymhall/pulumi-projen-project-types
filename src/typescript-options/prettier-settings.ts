// ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
import type { javascript } from 'projen';

/**
 * PrettierSettings
 */
export interface PrettierSettings {
  /**
   * Indent script and style tags in Vue files.
   * @default false
   * @stability experimental
   */
  readonly vueIndentScriptAndStyle?: boolean;
  /**
   * Indent with tabs instead of spaces.
   * @default false
   * @stability experimental
   */
  readonly useTabs?: boolean;
  /**
   * Print trailing commas wherever possible when multi-line.
   * @default TrailingComma.ES5
   * @stability experimental
   */
  readonly trailingComma?: javascript.TrailingComma;
  /**
   * Number of spaces per indentation level.
   * @default 2
   * @stability experimental
   */
  readonly tabWidth?: number;
  /**
   * Use single quotes instead of double quotes.
   * @default true
   * @stability experimental
   */
  readonly singleQuote?: boolean;
  /**
   * Print semicolons.
   * @default true
   * @stability experimental
   */
  readonly semi?: boolean;
  /**
   * Require either '@prettier' or '@format' to be present in the file's first docblock comment in order for it to be formatted.
   * @default false
   * @stability experimental
   */
  readonly requirePragma?: boolean;
  /**
   * Format code starting at a given character offset.
   * The range will extend backwards to the start of the first line containing the selected
   * statement.
   * This option cannot be used with --cursor-offset.
   * @default 0
   * @stability experimental
   */
  readonly rangeStart?: number;
  /**
   * Format code ending at a given character offset (exclusive).
   * The range will extend forwards to the end of the selected statement.
   * This option cannot be used with --cursor-offset.
   * @default null
   * @stability experimental
   */
  readonly rangeEnd?: number;
  /**
   * Change when properties in objects are quoted.
   * @default QuoteProps.ASNEEDED
   * @stability experimental
   */
  readonly quoteProps?: javascript.QuoteProps;
  /**
   * How to wrap prose.
   * @default ProseWrap.PRESERVE
   * @stability experimental
   */
  readonly proseWrap?: javascript.ProseWrap;
  /**
   * The line length where Prettier will try wrap.
   * @default 80
   * @stability experimental
   */
  readonly printWidth?: number;
  /**
   * Custom directory that contains prettier plugins in node_modules subdirectory.
   * Overrides default behavior when plugins are searched relatively to the location of
   * Prettier.
   * Multiple values are accepted.
   * @default []
   * @stability experimental
   */
  readonly pluginSearchDirs?: Array<string>;
  /**
   * Add a plugin.
   * Multiple plugins can be passed as separate `--plugin`s.
   * @default []
   * @stability experimental
   */
  readonly plugins?: Array<string>;
  /**
   * Which parser to use.
   * @default - Prettier automatically infers the parser from the input file path, so you shouldnâ€™t have to change this setting.
   * @stability experimental
   */
  readonly parser?: string;
  /**
   * Use single quotes in JSX.
   * @default false
   * @stability experimental
   */
  readonly jsxSingleQuote?: boolean;
  /**
   * Insert.
   * @default false
   * @stability experimental
   * @format pragma into file's first docblock comment.
   */
  readonly insertPragma?: boolean;
  /**
   * How to handle whitespaces in HTML.
   * @default HTMLWhitespaceSensitivity.CSS
   * @stability experimental
   */
  readonly htmlWhitespaceSensitivity?: javascript.HTMLWhitespaceSensitivity;
  /**
   * Specify the input filepath.
   * This will be used to do parser inference.
   * @default none
   * @stability experimental
   */
  readonly filepath?: string;
  /**
   * Which end of line characters to apply.
   * @default EndOfLine.LF
   * @stability experimental
   */
  readonly endOfLine?: javascript.EndOfLine;
  /**
   * Control how Prettier formats quoted code embedded in the file.
   * @default EmbeddedLanguageFormatting.AUTO
   * @stability experimental
   */
  readonly embeddedLanguageFormatting?: javascript.EmbeddedLanguageFormatting;
  /**
   * Print (to stderr) where a cursor at the given position would move to after formatting.
   * This option cannot be used with --range-start and --range-end.
   * @default -1
   * @stability experimental
   */
  readonly cursorOffset?: number;
  /**
   * Print spaces between brackets.
   * @default true
   * @stability experimental
   */
  readonly bracketSpacing?: boolean;
  /**
   * Put > of opening tags on the last line instead of on a new line.
   * @default false
   * @stability experimental
   */
  readonly bracketSameLine?: boolean;
  /**
   * Include parentheses around a sole arrow function parameter.
   * @default ArrowParens.ALWAYS
   * @stability experimental
   */
  readonly arrowParens?: javascript.ArrowParens;
}

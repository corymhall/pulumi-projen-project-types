// ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
import type { github, GroupRunnerOptions, ReleasableCommits, release, Task } from 'projen';

/**
 * TagReleaseOptions
 */
export interface TagReleaseOptions {
  /**
   * Permissions granted to the release workflow job.
   * @default `{ contents: JobPermission.WRITE }`
   * @stability experimental
   */
  readonly workflowPermissions?: github.workflows.JobPermissions;
  /**
   * Node version to setup in GitHub workflows if any node-based CLI utilities are needed.
   * For example `publib`, the CLI projen uses to publish releases,
   * is an npm library.
   * @default "lts/*""
   * @stability experimental
   */
  readonly workflowNodeVersion?: string;
  /**
   * Create a GitHub release for each release.
   * @default true
   * @stability experimental
   */
  readonly githubRelease?: boolean;
  /**
   * A name of a .json file to set the `version` field in after a bump.
   * @stability experimental
   */
  readonly versionFile: string;
  /**
   * The task to execute in order to create the release artifacts.
   * Artifacts are
   * expected to reside under `artifactsDirectory` (defaults to `dist/`) once
   * build is complete.
   * @stability experimental
   */
  readonly task: Task;
  /**
   * The default branch name to release from.
   * Use `majorVersion` to restrict this branch to only publish releases with a
   * specific major version.
   *
   * You can add additional branches using `addBranch()`.
   * @stability experimental
   */
  readonly branch: string;
  /**
   * A directory which will contain build artifacts.
   * @default "dist"
   * @stability experimental
   */
  readonly artifactsDirectory: string;
  /**
   * Github Runner Group selection options.
   * @stability experimental
   * @description Defines a target Runner Group by name and/or labels
   * @throws {Error} if both `runsOn` and `runsOnGroup` are specified
   */
  readonly workflowRunsOnGroup?: GroupRunnerOptions;
  /**
   * Github Runner selection labels.
   * @default ["ubuntu-latest"]
   * @stability experimental
   * @description Defines a target Runner by labels
   * @throws {Error} if both `runsOn` and `runsOnGroup` are specified
   */
  readonly workflowRunsOn?: Array<string>;
  /**
   * Container image to use for GitHub workflows.
   * @default - default image
   * @stability experimental
   */
  readonly workflowContainerImage?: string;
  /**
   * Custom configuration used when creating changelog with commit-and-tag-version package.
   * Given values either append to default configuration or overwrite values in it.
   * @default - standard configuration applicable for GitHub repositories
   * @stability experimental
   */
  readonly versionrcOptions?: Record<string, any>;
  /**
   * A set of workflow steps to execute in order to setup the workflow container.
   * @stability experimental
   */
  readonly releaseWorkflowSetupSteps?: Array<github.workflows.JobStep>;
  /**
   * The name of the default release workflow.
   * @default "release"
   * @stability experimental
   */
  readonly releaseWorkflowName?: string;
  /**
   * The release trigger to use.
   * @default - Continuous releases (`ReleaseTrigger.continuous()`)
   * @stability experimental
   */
  readonly releaseTrigger?: release.ReleaseTrigger;
  /**
   * Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers.
   * Note: this prefix is used to detect the latest tagged version
   * when bumping, so if you change this on a project with an existing version
   * history, you may need to manually tag your latest release
   * with the new prefix.
   * @default "v"
   * @stability experimental
   */
  readonly releaseTagPrefix?: string;
  /**
   * CRON schedule to trigger new releases.
   * @default - no scheduled releases
   * @deprecated Use `releaseTrigger: ReleaseTrigger.scheduled()` instead
   * @stability deprecated
   */
  readonly releaseSchedule?: string;
  /**
   * The label to apply to issues indicating publish failures.
   * Only applies if `releaseFailureIssue` is true.
   * @default "failed-release"
   * @stability experimental
   */
  readonly releaseFailureIssueLabel?: string;
  /**
   * Create a github issue on every failed publishing task.
   * @default false
   * @stability experimental
   */
  readonly releaseFailureIssue?: boolean;
  /**
   * Automatically release new versions every commit to one of branches in `releaseBranches`.
   * @default true
   * @deprecated Use `releaseTrigger: ReleaseTrigger.continuous()` instead
   * @stability deprecated
   */
  readonly releaseEveryCommit?: boolean;
  /**
   * Defines additional release branches.
   * A workflow will be created for each
   * release branch which will publish releases from commits in this branch.
   * Each release branch _must_ be assigned a major version number which is used
   * to enforce that versions published from that branch always use that major
   * version. If multiple branches are used, the `majorVersion` field must also
   * be provided for the default branch.
   * @default - no additional branches are used for release. you can use
`addBranch()` to add additional branches.
   * @stability experimental
   */
  readonly releaseBranches?: Record<string, release.BranchOptions>;
  /**
   * Find commits that should be considered releasable Used to decide if a release is required.
   * @default ReleasableCommits.everyCommit()
   * @stability experimental
   */
  readonly releasableCommits?: ReleasableCommits;
  /**
   * Define publishing tasks that can be executed manually as well as workflows.
   * Normally, publishing only happens within automated workflows. Enable this
   * in order to create a publishing task for each publishing activity.
   * @default false
   * @stability experimental
   */
  readonly publishTasks?: boolean;
  /**
   * Instead of actually publishing to package managers, just print the publishing command.
   * @default false
   * @stability experimental
   */
  readonly publishDryRun?: boolean;
  /**
   * Bump versions from the default branch as pre-releases (e.g. "beta", "alpha", "pre").
   * @default - normal semantic versions
   * @stability experimental
   */
  readonly prerelease?: string;
  /**
   * Steps to execute after build as part of the release workflow.
   * @default []
   * @stability experimental
   */
  readonly postBuildSteps?: Array<github.workflows.JobStep>;
  /**
   * The npmDistTag to use when publishing from the default branch.
   * To set the npm dist-tag for release branches, set the `npmDistTag` property
   * for each branch.
   * @default "latest"
   * @stability experimental
   */
  readonly npmDistTag?: string;
  /**
   * A shell command to control the next version to release.
   * If present, this shell command will be run before the bump is executed, and
   * it determines what version to release. It will be executed in the following
   * environment:
   *
   * - Working directory: the project directory.
   * - `$VERSION`: the current version. Looks like `1.2.3`.
   * - `$LATEST_TAG`: the most recent tag. Looks like `prefix-v1.2.3`, or may be unset.
   *
   * The command should print one of the following to `stdout`:
   *
   * - Nothing: the next version number will be determined based on commit history.
   * - `x.y.z`: the next version number will be `x.y.z`.
   * - `major|minor|patch`: the next version number will be the current version number
   *   with the indicated component bumped.
   *
   * This setting cannot be specified together with `minMajorVersion`; the invoked
   * script can be used to achieve the effects of `minMajorVersion`.
   * @default - The next version will be determined based on the commit history and project settings.
   * @stability experimental
   */
  readonly nextVersionCommand?: string;
  /**
   * Minimal Major version to release.
   * This can be useful to set to 1, as breaking changes before the 1.x major
   * release are not incrementing the major version number.
   *
   * Can not be set together with `majorVersion`.
   * @default - No minimum version is being enforced
   * @stability experimental
   */
  readonly minMajorVersion?: number;
  /**
   * Major version to release from the default branch.
   * If this is specified, we bump the latest version of this major version line.
   * If not specified, we bump the global latest version.
   * @default - Major version is not enforced.
   * @stability experimental
   */
  readonly majorVersion?: number;
  /**
   * Version requirement of `publib` which is used to publish modules to npm.
   * @default "latest"
   * @stability experimental
   */
  readonly jsiiReleaseVersion?: string;
  /**
   * The `commit-and-tag-version` compatible package used to bump the package version, as a dependency string.
   * This can be any compatible package version, including the deprecated `standard-version@9`.
   * @default - A recent version of "commit-and-tag-version"
   * @stability experimental
   */
  readonly bumpPackage?: string;
  /**
   * The GitHub Token to use when pushing the tag commit
Note: if you use the default `${{ secrets.GITHUB_TOKEN }}` then the
Push/Tag will not trigger any other workflows
   * @default ${{ secrets.GITHUB_TOKEN }}
   */
  readonly githubReleaseToken?: string;
  /**
   * The file to bump the version in. Must be a commit-and-tag-version compatible bump file
   * @default package.json
   */
  readonly bumpFile?: string;
}
